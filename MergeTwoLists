class ListNode(object):
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
class Solution(object):
    def mergeTwoLists(self,list1, list2):
        """
        :type list1: Optional[ListNode]
        :type list2: Optional[ListNode]
        :rtype: Optional[ListNode]
        """
        if list1 is None:
            return list2
        elif list2 is None:
            return list1
        elif list1 is None and list2 is None:
            return []
        while list1 and list2:
            if list1.val <= list2.val:
                temp = ListNode(list2.val)
                temp.next = list1.next
                list1.next = temp
            else:
                temp = ListNode(list2.val)
                temp.next = list1
                list2 = list2.next
            list1 = list1.next
        return list1


# class Solution(object):
#     def mergeTwoLists(self, list1, list2):
#         dummy = ListNode()
#         cur = dummy 
        
#         while list1 and list2:
#             if list1.val <= list2.val:
#                 cur.next = list1        # dummy.next = list1
#                 list1 = list1.next
#             else:
#                 cur.next = list2
#                 list2 = list2.next
#             cur = cur.next      # dia chi cur = dia chi dummy.next ?
        
#         cur.next = list1 if list1 else list2
        
#         return dummy.next

s = Solution()             
          # 1 4 5 | 2 3 6 
          # 1 2 4 | 3 5 6
node1 = ListNode(1)
node2 = ListNode(4)
node3 = ListNode(5)
node4 = ListNode(2)
node5 = ListNode(3)
node6 = ListNode(6)
# kết nối các node với nhau
node1.next = node2
node2.next = node3
node4.next = node5
node5.next = node6

merged_list = s.mergeTwoLists(node1, node4)
current = merged_list
while current is not None:
    print(current.val)
    current = current.next


